package Test::ClassC::Plugin::Parser::Header;

use v5.38;
use lib './lib';
use lib './t';

use ClassC::Core::Logging::Logger;
use Test::Data::Example::1::Out qw(
    $OBJECT
    $CAR
);
require ClassC::Core::OOP::Class;
require ClassC::Core::OOP::Dependency;
require ClassC::Core::OOP::Field;
require ClassC::Core::OOP::Method;
require ClassC::Plugin::Writer::Header;

use Test::More tests => 2;
use Test::IO;

ClassC::Plugin::Writer::Header::write_header('example/1/out/Object.h', $OBJECT);
is(get_file_contents('example/1/out/Object.h'), <<~CLASS, 'Write Object');
    /*
     * Class Object
     * Generated by ClassC.
     */
    
    #include <stdbool.h>

    typedef struct Object Object;

    /* Vtable */
    struct Object_Vtable_ {
      int (*hash)();
      bool (*equals)(void *other);
      char* (*to_string)();
    };

    /* Instance */
    struct Object {
      struct Object_Vtable_* _vtable_;
    };

    /* Functions */
    int Object_hash();
    bool Object_equals(void *other);
    char* Object_to_string();

    /* Vtable Instance */
    const struct Object_Vtable_ Object_vtable_ = {
      .hash = Object_hash,
      .equals = Object_equals,
      .to_string = Object_to_string,
    };
    CLASS

ClassC::Plugin::Writer::Header::write_header('example/1/out/Car.h', $CAR);
is(get_file_contents('example/1/out/Car.h'), <<~CLASS, 'Write Car');
    /*
     * Class Car
     * Generated by ClassC.
     */

    typedef struct Car Car;

    /* Vtable */
    struct Car_Vtable_ {
      void (*move)();
    };

    /* Instance */
    struct Car {
      struct Car_Vtable_* _vtable_;
      int max_speed;
      int horse_power;
    };

    /* Functions */
    void Car_move();

    /* Vtable Instance */
    const struct Car_Vtable_ Car_vtable_ = {
      .move = Car_move,
    };
    CLASS
